from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import hashlib


def is_pkcs7_padded(message):
    padding = message[-message[-1]:]
    return all(padding[i] == len(padding) for i in range(0, len(padding)))


def decrypt_flag(shared_secret: int, iv: str, ciphertext: str):
    # Derive AES key from shared secret
    sha1 = hashlib.sha1()
    sha1.update(str(shared_secret).encode('ascii'))
    key = sha1.digest()[:16]
    # Decrypt flag
    ciphertext = bytes.fromhex(ciphertext)
    iv = bytes.fromhex(iv)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext)

    if is_pkcs7_padded(plaintext):
        return unpad(plaintext, 16).decode('ascii')
    else:
        return plaintext.decode('ascii')


iv= '9601749678a782c06dbb29adaeb3f617'
encrypted=  '44484828136d10af0012e6027a504dcbf837d72c2f701296827025539da9716f'

shared =  1159477795326795921772738805428299724600011084243329194915409383477359804251170640849295750707717985216650400780532245022298486478120875642108524891395176016843219219489053198770008735742051719895085553105859182495876438911983514116122502854524035490886545621872731153002751428884020547486074385561622063398934296928760589944693284032424327119514487526344534170395880006308976613859184774817612631235685154661556351047555361663422136966149940543198043951537281541
print(decrypt_flag(shared, iv, encrypted))
iv =  '9388f581cba8e22e8236c6b608f70d0d'
encrypted =  '753944e32ba3e05e45bfb944944ced395a9a32163903d4ee6a0cacf1804a2233e50524ddd67e86ca969aa3ece313cef4319cd7ccf201d3a4cf0b8e2cb06b615ea85316aee00c74b402af49310452d358'
print(decrypt_flag(shared, iv, encrypted))


"""
p:  2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
g:  2
A:  44337299880309063313023445501117562725287802531885922747895375882154312893493008137229037927270803062364020910171447535868033910198010240418165011173611913539469563998994375159380495312771395140594118637612793129693970248045725450370739169001957858073975741933274581646756865096035870220353299096183089930958999723612248916267538065637955357440016312742214333783252646677868429672336752198120131180048407069365884467594091322314824980137975834959026066376344096

B:  1332031313698548833033249594338122729162140512087999866583622830906024235851483440363543558375467951822075320393860391379992467966459930007449194008307404271903176924518424791919006756772648721847838795251365303648347172825545393214725380142512926354638206335623419146858869171965495627136837793744376459749551549275663618807568483077726455507642925200571720291041844003104101615731265000091540417326536656666043908936504320307368571862131068287174811224001646320

iv:  9601749678a782c06dbb29adaeb3f617
encrypted:  44484828136d10af0012e6027a504dcbf837d72c2f701296827025539da9716f

shared:  1159477795326795921772738805428299724600011084243329194915409383477359804251170640849295750707717985216650400780532245022298486478120875642108524891395176016843219219489053198770008735742051719895085553105859182495876438911983514116122502854524035490886545621872731153002751428884020547486074385561622063398934296928760589944693284032424327119514487526344534170395880006308976613859184774817612631235685154661556351047555361663422136966149940543198043951537281541

iv:  9388f581cba8e22e8236c6b608f70d0d
encrypted:  753944e32ba3e05e45bfb944944ced395a9a32163903d4ee6a0cacf1804a2233e50524ddd67e86ca969aa3ece313cef4319cd7ccf201d3a4cf0b8e2cb06b615ea85316aee00c74b402af49310452d358     
"""